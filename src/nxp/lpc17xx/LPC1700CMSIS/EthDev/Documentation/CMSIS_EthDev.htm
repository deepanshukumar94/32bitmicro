<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html xmlns:p="urn:schemas-microsoft-com:office:powerpoint" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office"><head>
  
  <title>CMSIS: Cortex Microcontroller Software Interface Standard (Ethernet Device)</title><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
  <meta name="ProgId" content="FrontPage.Editor.Document">
  <style>
<!--
/*-----------------------------------------------------------Keil Software CHM Style Sheet
-----------------------------------------------------------*/
body { color: #000000; background-color: #FFFFFF; font-size: 75%; font-family: Verdana, Arial, 'Sans Serif' }
a:link { color: #0000FF; text-decoration: underline }
a:visited { color: #0000FF; text-decoration: underline }
a:active { color: #FF0000; text-decoration: underline }
a:hover { color: #FF0000; text-decoration: underline }
h1 { font-family: Verdana; font-size: 18pt; color: #000080; font-weight: bold; text-align: Center; margin-right: 3 }
h2 { font-family: Verdana; font-size: 14pt; color: #000080; font-weight: bold; background-color: #CCCCCC; margin-top: 24; margin-bottom: 3; padding: 6 }
h3 { font-family: Verdana; font-size: 10pt; font-weight: bold; background-color: #CCCCCC; margin-top: 24; margin-bottom: 3; padding: 6 }
pre { font-family: Courier New; font-size: 10pt; background-color: #CCFFCC; margin-left: 24; margin-right: 24 }
ul { list-style-type: square; margin-top: 6pt; margin-bottom: 0 }
ol { margin-top: 6pt; margin-bottom: 0 }
li { clear: both; margin-bottom: 6pt }
table { font-size: 100%; border-width: 0; padding: 0 }
th { color: #FFFFFF; background-color: #000080; text-align: left; vertical-align: bottom; padding-right: 6pt }
tr { text-align: left; vertical-align: top }
td { text-align: left; vertical-align: top; padding-right: 6pt }
.ToolT { font-size: 8pt; color: #808080 }
.TinyT { font-size: 8pt; text-align: Center }
code { color: #000000; background-color: #E0E0E0; font-family: 'Courier New', Courier; line-height: 120%; font-style: normal }
/*-----------------------------------------------------------Notes
-----------------------------------------------------------*/
p.note { font-weight: bold; clear: both; margin-bottom: 3pt; padding-top: 6pt }
/*-----------------------------------------------------------Expanding/Contracting Divisions
-----------------------------------------------------------*/
#expand { text-decoration: none; margin-bottom: 3pt }
img.expand { border-style: none; border-width: medium }
div.expand { display: none; margin-left: 9pt; margin-top: 0 }
/*-----------------------------------------------------------Where List Tags
-----------------------------------------------------------*/
p.wh { font-weight: bold; clear: both; margin-top: 6pt; margin-bottom: 3pt }
table.wh { width: 100% }
td.whItem { white-space: nowrap; font-style: italic; padding-right: 6pt; padding-bottom: 6pt }
td.whDesc { padding-bottom: 6pt }
/*-----------------------------------------------------------Keil Table Tags
-----------------------------------------------------------*/
table.kt { width: 100%; border: 1pt solid #000000 }
th.kt { white-space: nowrap; border-bottom: 1pt solid #000000; padding-left: 6pt; padding-right: 6pt; padding-top: 4pt; padding-bottom: 4pt }
tr.kt { }
td.kt { color: #000000; background-color: #E0E0E0; border-top: 1pt solid #A0A0A0; padding-left: 6pt; padding-right: 6pt; padding-top: 2pt; padding-bottom: 2pt }
/*----------------------------------------------------------------------------------------------------------------------*/
    .style1 {
	background-color: #E0E0E0;
}
.O
	{color:#1D315B;
	font-size:149%;}
    -->
</style>
</head>

<body>

<h1>Cortex Microcontroller Software Interface Standard<br>
    Ethernet Device</h1>

<p align="center">This file describes the Ethernet Device Driver for Cortex Microcontroller Software Interface Standard (CMSIS).</p>
<p align="center">Version: 1.20 - 22. May 2009</p>

<p class="TinyT">Information in this file, the accompany manuals, and software is<br>
                 Copyright © ARM Ltd.<br>All rights reserved.
</p>

<hr>

<h2>Revision History</h2>
<ul>
	<li>Revision 0.01 - November 2008: Concept</li>
  <li>Revision 0.06 - February 2009: Added Multicast</li>
  <li>Revision 1.00 - February 2009: Added RxFrameReady callback, added SetMCFilter function</li>
  <li>Revision 1.10 - February 2009: First Release</li>
  <li>Revision 1.20 - May 2009: Second Release</li>
</ul>

<hr>

<h2>Contents</h2>

<ol>
  <li class="LI2"><a href="#About">About</a></li>
  <li class="LI2"><a href="#Files">CMSIS Ethernet Device Files</a></li>
  <li class="LI2"><a href="#Definitions">CMSIS Ethernet Device Definitions</a></li>  
  <li class="LI2"><a href="#IoBlock">CMSIS Ethernet Device I/O Block</a></li>
  <li class="LI2"><a href="#Functions">CMSIS Ethernet Device Functions</a></li>
  <li class="LI2"><a href="#CbFunctions">CMSIS Ethernet Device Callback Functions</a></li>
  <li class="LI2"><a href="#ExampleDrivers">CMSIS Ethernet Example Drivers</a></li>
  <li class="LI2"><a href="#Flowcharts">Flowcharts</a></li>
</ol>



<p>&nbsp;</p>
<h2><a name="About"></a>About</h2>
<p>
  The CMSIS Ethernet Device provides a standard interface to an Ethernet Controller that is part of a Cortex-M3 system.
  This interface is an hardware abstraction layer between the Ethernet Controller and a communication (TCP/IP) stack.
  It consists of a general Ethernet Device Driver (files EthDev.h) and a device specific Ethernet Device Driver
  (files EthDev_LM3C.[h,c]). The device specific Ethernet Device Driver provides an I/O Block which is used
  to select, configure and access the Device Driver. Each Ethernet Device needs a device specific Ethernet Device
  Driver which provides it's own I/O block. The I/O blocks differ in their names (eth0, eth1, ...).
</p>

<p>&nbsp;</p>
<h2><a name="Files"></a>CMSIS Ethernet Device Files</h2>
<p>
  <p>
    The driver consists of a generic include file <b>EthDev.h</b> and the device specific driver files
    <b>EthDev_&lt;device&gt;.c</b> and <b>EthDev_&lt;device&gt;.h</b>. The device specific driver files
    are provided by the device vendor. The naming conventions are 
    <strong>EthDev_</strong>&lt;device&gt;<strong>.[c,h]</strong>. The device vendor specifies <strong>&lt;device&gt;</strong>.
</p>
<table class="kt" border="0" cellpadding="0" cellspacing="0">
  <tbody>
    <tr>
      <th class="kt">Name</th>
      <th class="kt">Description</th>
    </tr>
    <tr>
      <td class="kt"><b><a href="#EthDev_h">EthDev.h</a></b></td>
      <td class="kt">Global defines and structure definitions for general Ethernet Device interface.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#EthDev_device_h">EthDev_&lt;device&gt;.h</a></b></td>
      <td class="kt">Device dependent definitions of the device specific Ethernet Device Driver.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#EthDev_device_c">EthDev_&lt;device&gt;.c</a></b></td>
      <td class="kt">Device specific Ethernet Device Driver.</td>
    </tr>

  </tbody>
</table>

<h3><a name="EthDev_h"></a>File EthDev.h</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Description</b></td>
      <td>File <strong>EthDev.h</strong> contains function prototypes and type definitions for  
          configuration and status values. Also global defines are part of this file. 
          File <strong>EthDev.h</strong> must be included in the communication (TCP/IP) stack. 
          This file contains the type definition for <b>I/O Block</b>. The I/O block contains
          configuration values and function pointer to access the device specific Ethernet Device Driver
      </td>
    </tr>
  </tbody>
</table>

<h3><a name="EthDev_device_h"></a>File EthDev_&lt;device&gt;.h</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Description</b></td>
      <td>File <strong>EthDev_&lt;device&gt;.h</strong> contains device specific defines like registers and register values.
          It is only included from file <strong>EthDev_&lt;device&gt;.c</strong>.
      </td>
    </tr>
  </tbody>
</table>

<h3><a name="EthDev_device_c"></a>File EthDev_&lt;device&gt;.c</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Description</b></td>
      <td>File <strong>EthDev_&lt;device&gt;.c</strong> contains the device specific Ethernet Device Driver. 
         Provides the Device Driver specific I/O Block.
         It must be linked to the communication (TCP/IP) stack.
      </td>
    </tr>
  </tbody>
</table>



<p>&nbsp;</p>
<h2><a name="Definitions"></a>CMSIS Ethernet Device Definitions</h2>
<p>
  Ethernet Device Driver uses following definitions for configuartion and 
  function parameter values:
</p>
<table class="kt" border="0" cellpadding="0" cellspacing="0">
  <tbody>
    <tr>
      <th class="kt">Name</th>
      <th class="kt">Description</th>
    </tr>
    <tr>
      <td class="kt"><b><a href="#GlobalDefines">Global Defines</a></b></td>
      <td class="kt">Global define values.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#LinkMode">Link Mode</a></b></td>
      <td class="kt">Configuration values for the used link mode.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#LinkState">Link State</a></b></td>
      <td class="kt">Link state values.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#LinkSpeed">Link Speed</a></b></td>
      <td class="kt">Link speed values.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#LinkDuplex">Link Duplex</a></b></td>
      <td class="kt">Link duplex values</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#LinkStatus">Link Status</a></b></td>
      <td class="kt">Provides attributes for current link state, link speed and link duplex</td>
    </tr>

  </tbody>
</table>

<h3><a name="GlobalDefines"></a>Global Defines</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
#define EthDev_ADDR_SIZE         6
#define EthDev_MTU_SIZE       1514</pre>
      </td>
    </tr>
    <tr>
      <td><b>Description</b></td>
      <td>
        <p>This two defines are used from the Ethernet Device Driver.
        </p>
      </td>
    </tr>
    <tr>
      <td><b>Define</b></td>
      <td>
        <p><b>EthDev_ADDR_SIZE</b><br>
           Ethernet Address size in bytes.
        </p>
        <p><b>EthDev_MTU_SIZE</b><br>
           Maximum Transmission Unit size.
        </p>
      </td>
    </tr>
  </tbody>
</table>

<h3><a name="LinkMode"></a>Link Mode</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
typedef enum {
  EthDev_MODE_AUTO              = 0,
  EthDev_MODE_10M_FULL          = 1,
  EthDev_MODE_10M_HALF          = 2,
  EthDev_MODE_100M_FULL         = 3,
  EthDev_MODE_100M_HALF         = 4,
  EthDev_MODE_1000M_FULL        = 5,
  EthDev_MODE_1000M_HALF        = 6,
} EthDev_MODE;</pre>
      </td>
    </tr>
    <tr>
      <td><b>Description</b></td>
      <td>
        <p>Link Mode values and explanation.
        </p>
      </td>
    </tr>
    <tr>
      <td><b>Link Mode</b></td>
      <td>
        <p><b>EthDev_MODE_AUTO</b><br>
           Ethernet link speed and link duplex depend on autonegothiation.
        </p>
        <p><b>EthDev_MODE_10M_FULL</b><br>
           Use 10.0 Mbps link speed with full duplex.
        </p>
        <p><b>EthDev_MODE_10M_HALF</b><br>
           Use 10.0 Mbps link speed with half duplex.
        </p>
        <p><b>EthDev_MODE_100M_FULL</b><br>
           Use 100.0 Mbps link speed with full duplex.
        </p>
        <p><b>EthDev_MODE_100M_HALF</b><br>
           Use 100.0 Mbps link speed with half duplex.
        </p>
        <p><b>EthDev_MODE_1000M_FULL</b><br>
           Use 1000.0 Mbps link speed with full duplex.
        </p>
        <p><b>EthDev_MODE_1000M_HALF</b><br>
           Use 1000.0 Mbps link speed with half duplex.
        </p>
      </td>
    </tr>
  </tbody>
</table>

<h3><a name="LinkState"></a>Link State</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
typedef enum {
  EthDev_LINK_DOWN              = 0,
  EthDev_LINK_UP                = 1,
} EthDev_LINK;</pre>
      </td>
    </tr>
    <tr>
      <td><b>Description</b></td>
      <td>
        <p>Link State values and explanation.
        </p>
      </td>
    </tr>
    <tr>
      <td><b>Link State</b></td>
      <td>
        <p><b>EthDev_LINK_DOWN</b><br>
           Ethernet link is not established.
        </p>
        <p><b>EthDev_LINK_UP</b><br>
           Ethernet link is established.
        </p>
      </td>
    </tr>
  </tbody>
</table>

<h3><a name="LinkSpeed"></a>Link Speed</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
typedef enum {
  EthDev_SPEED_10M              = 0,
  EthDev_SPEED_100M             = 1,
  EthDev_SPEED_1000M            = 2,
} EthDev_SPEED;</pre>
      </td>
    </tr>
    <tr>
      <td><b>Description</b></td>
      <td>
        <p>Link Speed values and explanation.
        </p>
      </td>
    </tr>
    <tr>
      <td><b>Link Speed</b></td>
      <td>
        <p><b>EthDev_SPEED_10M</b><br>
           10.0 Mbps link speed.
        </p>
        <p><b>EthDev_SPEED_100M</b><br>
           100.0 Mbps link speed.
        </p>
        <p><b>EthDev_SPEED_1000M</b><br>
           1000.0 Mbps link speed.
        </p>
      </td>
    </tr>
  </tbody>
</table>


<h3><a name="LinkDuplex"></a>Link Duplex</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
typedef enum {
  EthDev_DUPLEX_HALF            = 0,
  EthDev_DUPLEX_FULL            = 1,
} EthDev_DUPLEX;</pre>
      </td>
    </tr>
    <tr>
      <td><b>Description</b></td>
      <td>
        <p>Link Duplex values and explanation.
        </p>
      </td>
    </tr>
    <tr>
      <td><b>Link Duplex</b></td>
      <td>
        <p><b>EthDev_DUPLEX_HALF</b><br>
           Link half duplex.
        </p>
        <p><b>EthDev_DUPLEX_FULL</b><br>
           Link full duplex.
        </p>
      </td>
    </tr>
  </tbody>
</table>

<h3><a name="LinkStatus"></a>Link Status</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
typedef struct {
  EthDev_LINK   Link   : 1;
  EthDev_DUPLEX Duplex : 1;
  EthDev_SPEED  Speed  : 2;
} EthDev_STATUS;</pre>
      </td>
    </tr>
    <tr>
      <td><b>Description</b></td>
      <td>
        <p>Link Status attributes and explanation.
        </p>
      </td>
    </tr>
    <tr>
      <td><b>Attributes</b></td>
      <td>
        <p><b>Link</b><br>
           Valid values are:
          <ul>
            <li>EthDev_LINK_DOWN</li>
            <li>EthDev_LINK_Up</li>
          </ul>
        </p>
        <p><b>Duplex</b><br>
           Valid values are:
          <ul>
            <li>EthDev_DUPLEX_HALF</li>
            <li>EthDev_DUPLEX_Full</li>
          </ul>
        </p>
        <p><b>Speed</b><br>
           Valid values are:
          <ul>
            <li>EthDev_SPEED_10M</li>
            <li>EthDev_SPEED_100M</li>
            <li>EthDev_SPEED_1000M</li>
          </ul>
        </p>
      </td>
    </tr>
  </tbody>
</table>





<p>&nbsp;</p>
<h2><a name="IoBlock"></a>CMSIS Ethernet Device I/O Block</h2>
<p>
  Ethernet Device Driver defines the following structure to pass initialization data
  and to access device specific functions:
</p>
<table class="kt" border="0" cellpadding="0" cellspacing="0">
  <tbody>
    <tr>
      <th class="kt">Name</th>
      <th class="kt">Description</th>
    </tr>
    <tr>
      <td class="kt"><b><a href="#EthDev_IOB">EthDev_IOB</a></b></td>
      <td class="kt">Structure to pass configuration values and callback functions to the Ethernet Device Driver.</td>
    </tr>

  </tbody>
</table>

<h3><a name="EthDev_IOB"></a>Structure EthDev_IOB</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
typedef struct {
   EthDev_MODE   Mode;
   unsigned char HwAddr[EthDev_ADDR_SIZE];
   void         *(*RxFrame)      (int size);
   void          (*RxFrameReady) (int size);

   int           (*Init)       (void);
   int           (*UnInit)     (void);
   int           (*SetMCFilter)(int NumHwAddr, unsigned char *pHwAddr);
   int           (*TxFrame)    (void *pData, int size);
   void          (*Lock)       (void);
   void          (*UnLock)     (void);
   EthDev_STATUS (*LinkChk)    (void);
} EthDev_IOB;</pre>
      </td>
    </tr>
    <tr>
      <td><b>Description</b></td>
      <td>
        <p>This structure is used to hold configuration values and function pointer to access
           the device specific Ethernet Device Driver. The configuration values are preset with
           default values.
        </p>
      </td>
    </tr>
    <tr>
      <td><b>Attributes</b></td>
      <td>
        <p><b>Mode</b><br>
           Selects the mode in which the Ethernet link is established.<br>
           Valid values are:
          <ul>
            <li>EthDev_MODE_AUTO  (default)</li>
            <li>EthDev_MODE_10M_FULL</li>
            <li>EthDev_MODE_10M_HALF</li>
            <li>EthDev_MODE_100M_FULL</li>
            <li>EthDev_MODE_100M_HALF</li>
            <li>EthDev_MODE_1000M_FULL</li>
            <li>EthDev_MODE_1000M_HALF</li>
          </ul>
        </p>
        <p><b>EthHwAddr</b><br>
           Contains the 6 byte MAC address. Default value is "0,0,0,0,0,0".
           If EthHwAddr address is 00:00:00:00:00:00, then the driver shall use it's own MAC which is 
           stored in HW (e.g. EEPROM).  After this MAC is used, the Init function shall copy 
           the used MAC to this entry to provide the application the MAC address for the Ethernet Device. 
           If EthHwAddr is not 0, then this MAC shall be used.
        </p>
        <p><b>void *(*RxFrame) (int size)</b><br>
           Callback function. Called when a frame is received.
           This function pointer must be set before the Init function is called.
        </p>
        <p><b>void  (*RxFrame) (int size)</b><br>
           Callback function. Called after the frame is copied to the application buffer.
           This function pointer is optional. In case of NULL the function is omitted.
        </p>
        <p><b>int (*Init) (void)</b><br>
           Function pointer to Init function.
        </p>
        <p><b>int (*UnInit) (void)</b><br>
           Function pointer to UnInit function.
        </p>
        <p><b>int (*SetMCFilter) (int NumHwAddr, unsigned char *pHwAddr)</b><br>
           Function pointer to set Multicast filter function.
        </p>
        <p><b>int (*EthDev_FrameTx) (void  *pData, int size)</b><br>
           Function pointer to frame transmit function.
        </p>
        <p><b>void (*Lock) (void)</b><br>
           Function pointer to device lock function.
        </p>
        <p><b>void (*UnLock) (void)</b><br>
           Function pointer to device unlock function.
        </p>
      </td>
    </tr>
  </tbody>
</table>




<p>&nbsp;</p>
<h2><a name="Functions"></a>CMSIS Ethernet Device Functions</h2>
<p>Ethernet Device Driver contains the following public functions:
</p>

<table class="kt" border="0" cellpadding="0" cellspacing="0">
  <tbody>
    <tr>
      <th class="kt">Name</th>
      <th class="kt">Description</th>
    </tr>

    <tr>
      <td class="kt"><b><a href="#EthDev_Init">EthDev_Init</a></b></td>
      <td class="kt">Initialize and start the Ethernet Device Driver.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#EthDev_UnInit">EthDev_UnInit</a></b></td>
      <td class="kt">Uninitialize and stop the Ethernet Device Driver.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#EthDev_SetMCFilter">EthDev_SetMCFilter</a></b></td>
      <td class="kt">Set Multicast filters addresses.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#EthDev_FrameTx">EthDev_TxFrame</a></b></td>
      <td class="kt">Pass a frame to the EThernet Device Driver to transmit.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#EthDev_Lock">EthDev_Lock</a></b></td>
      <td class="kt">Lock the Ethernet Device Driver (mask interrupt).</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#EthDev_Unlock">EthDev_Unlock</a></b></td>
      <td class="kt">Unlock the Ethernet Device Driver (unmask interrupt).</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#EthDev_LinkChk">EthDev_LinkChk</a></b></td>
      <td class="kt">Retrieve the current link status.</td>
    </tr>
  </tbody>
</table>

<h3><a name="EthDev_Init"></a>Function EthDev_Init</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
static int EthDev_Init (void);</pre>
      </td>
    </tr>

    <tr>
      <td><b>Description</b></td>
      <td>This function initializes the Ethernet Device Driver according the <b>EthDev_IOB</b> structure
          and starts it.
      </td>
    </tr>

    <tr>
      <td><b>Parameter</b></td>
      <td>none</td>
    </tr>

    <tr>
      <td><b>Return Code</b></td>
      <td><ul style="margin-top:0px">
            <li>Success (0)</li>
            <li>Failed (-1)</li>
          </ul>
      </td>
    </tr>
  </tbody>
</table>

<h3><a name="EthDev_UnInit"></a>Function EthDev_UnInit</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
static int EthDev_UnInit (void);</pre>
      </td>
    </tr>

    <tr>
      <td><b>Description</b></td>
      <td>This function uninitializes the Ethernet Device Driver and stops it.
      </td>
    </tr>

    <tr>
      <td><b>Parameter</b></td>
      <td>none</td>
    </tr>

    <tr>
      <td><b>Return Code</b></td>
      <td><ul style="margin-top:0px">
            <li>Success (0)</li>
            <li>Failed (-1)</li>
          </ul>
      </td>
    </tr>
  </tbody>
</table>

<h3><a name="EthDev_SetMCFilter"></a>Function EthDev_SetMCFilter</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
static int EthDev_SetMCFilter (int NumHwAddr, unsigned char *pHwAddr);</pre>
      </td>
    </tr>

    <tr>
      <td><b>Description</b></td>
      <td>This function sets the Multicast filter addresses within the specific Ethernet Device Driver.
        The passed Multicast addresses can be used to set up a hash address filter table. It depends on
        the device capabilities how the device is configured with the Multicast addresses.
      </td>
    </tr>

    <tr>
      <td><b>Parameter</b></td>
      <td>
        <p><b>NumHwAddr</b><br>
           Number of passed Multicast addresses.
        </p>
        <p><b>pHwAddr</b><br>
           Pointer to the Multicast addresses.
        </p>
      </td>
    </tr>

    <tr>
      <td><b>Return Code</b></td>
      <td><ul style="margin-top:0px">
            <li>Success (0)</li>
            <li>Failed (-1)</li>
          </ul>
      </td>
    </tr>
  </tbody>
</table>

<h3><a name="EthDev_TxFrame"></a>Function EthDev_TxFrame</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
static int EthDev_TxFrame (void *pData, int size);</pre>
      </td>
    </tr>

    <tr>
      <td><b>Description</b></td>
      <td>This function passes a frame to the specific Ethernet Device Driver to transmit.
      </td>
    </tr>

    <tr>
      <td><b>Parameter</b></td>
      <td>
        <p><b>pData</b><br>
           Pointer to the data to send.
        </p>
        <p><b>size</b><br>
           Number of bytes to send.
        </p>
      </td>
    </tr>

    <tr>
      <td><b>Return Code</b></td>
      <td><ul style="margin-top:0px">
            <li>Success (0)</li>
            <li>Failed (-1)</li>
          </ul>
      </td>
    </tr>
  </tbody>
</table>

<h3><a name="EthDev_Lock"></a>Function EthDev_Lock</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
static void EthDev_Lock (void);</pre>
      </td>
    </tr>

    <tr>
      <td><b>Description</b></td>
      <td>This function locks the specific Ethernet Device Driver.
          The corresponding interrupt is disabled.
      </td>
    </tr>

    <tr>
      <td><b>Parameter</b></td>
      <td>none</td>
    </tr>

    <tr>
      <td><b>Return Code</b></td>
      <td>none</td>
    </tr>
  </tbody>
</table>

<h3><a name="EthDev_Unlock"></a>Function EthDev_Unlock</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
static void EthDev_UnLock (void);</pre>
      </td>
    </tr>

    <tr>
      <td><b>Description</b></td>
      <td>This function unlocks the specific Ethernet Device Driver.
          The corresponding interrupt is enabled.</td>
    </tr>

    <tr>
      <td><b>Parameter</b></td>
      <td>none</td>
    </tr>

    <tr>
      <td><b>Return Code</b></td>
      <td>none</td>
    </tr>
  </tbody>
</table>

<h3><a name="EthDev_PhyCtrl"></a>Function EthDev_LinkChk</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
static EthDev_STATUS EthDev_LinkChk (void);</pre>
      </td>
    </tr>

    <tr>
      <td><b>Description</b></td>
      <td>This function returns the current link status. It performs also a post configuration for
          the selected link speed and link duplex. It must be called in a timely manner to detect
          changes in the link state. 
      </td>
    </tr>

    <tr>
      <td><b>Parameter</b></td>
      <td>none</td>
    </tr>

    <tr>
      <td><b>Return Code</b></td>
      <td>Link status containing link speed, link duplex and link state.</td>
    </tr>
  </tbody>
</table>



<p>&nbsp;</p>
<h2><a name="CbFunctions"></a>CMSIS Ethernet Device Callback Functions</h2>
<p>
The application must provide following callback functions which are called from the specific
Ethernet Device Driver upon recieve frame event:
</p>
<table class="kt" border="0" cellpadding="0" cellspacing="0">
  <tbody>
    <tr>
      <th class="kt">Name</th>
      <th class="kt">Description</th>
    </tr>
    <tr>
      <td class="kt"><b><a href="#RxFrame">RxFrame</a></b></td>
      <td class="kt">Called after a frame is received.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#RxFrameReady">RxFrameReady</a></b></td>
      <td class="kt">Called after a frame is copied to the application buffer.</td>
    </tr>
  </tbody>
</table>

<h3><a name="RxFrame"></a>Callback Function RxFrame</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td nowrap="nowrap"><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
void *RxFrame (int size);</pre>
      </td>
    </tr>

    <tr>
      <td nowrap="nowrap"><b>Description</b></td>
      <td>This function is called after Ethernet Device driver received a frame. It returns 
          the start address of an application buffer to which the received frame is copied.<br>
          This function runs in the Ethernet Device driver interrupt context.</td>
    </tr>

    <tr>
      <td nowrap="nowrap"><b>Parameter</b></td>
      <td>
        <p><b>size</b><br>
           Size of the received frame.
        </p>
     </td>
    </tr>

    <tr>
      <td nowrap="nowrap"><b>Return Code</b></td>
      <td>Pointer to memory block</td>
    </tr>
  </tbody>
</table>

<h3><a name="RxFrameReady"></a>Callback Function RxFrameReady</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td nowrap="nowrap"><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
void RxFrameReady (int size);</pre>
      </td>
    </tr>

    <tr>
      <td nowrap="nowrap"><b>Description</b></td>
      <td>This function is called after Ethernet Device driver has copied a frame to the 
          application buffer. This function is optional. If a NULL pointer is passed via
          the IO block than the function call is omitted.<br>
          This function runs in the Ethernet Device driver interrupt context.</td>
    </tr>

    <tr>
      <td nowrap="nowrap"><b>Parameter</b></td>
      <td>
        <p><b>size</b><br>
           Size of the copied frame.
        </p>
     </td>
    </tr>

    <tr>
      <td nowrap="nowrap"><b>Return Code</b></td>
      <td>None</td>
    </tr>
  </tbody>
</table>



<p>&nbsp;</p>
<h2><a name="ExampleDrivers"></a>CMSIS Ethernet Example Drivers</h2>
<p>CMSIS Ethernet example drivers are provided for:</p> 
<ul>
  <li><b>Luminary Micro LM3S6965</b><br>
    Files EthDev_LM3S.h, EthDev_LM3S.c
  </li>
  <li><b>NXP LPC1768</b><br>
    Files EthDev_LPC17xx.h, EthDev_LPC17xx.c
  </li>
</ul>

<p>&nbsp;</p>
<h2><a name="Flowcharts"></a>Flowcharts</h2>
<p>The following Flowchart shows a typical Ethernet Device flow. 
<p>
  <img class="part" alt="CMSIS_EthDev_Interrupt" src="CMSIS_EthDev_Interrupt.png" border="0">
</p>
<p>The following Flowchart shows how multicast support can be changed. 
<p>
  <img class="part" alt="CMSIS_EthDev_Multicast" src="CMSIS_EthDev_Multicast.png" border="0">
</p>


</body>
</html>