<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html xmlns:p="urn:schemas-microsoft-com:office:powerpoint" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office"><head>
  
  <title>CMSIS: Cortex Microcontroller Software Interface Standard (SPI Device)</title><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
  <meta name="ProgId" content="FrontPage.Editor.Document">
  <style>
<!--
/*-----------------------------------------------------------Keil Software CHM Style Sheet
-----------------------------------------------------------*/
body { color: #000000; background-color: #FFFFFF; font-size: 75%; font-family: Verdana, Arial, 'Sans Serif' }
a:link { color: #0000FF; text-decoration: underline }
a:visited { color: #0000FF; text-decoration: underline }
a:active { color: #FF0000; text-decoration: underline }
a:hover { color: #FF0000; text-decoration: underline }
h1 { font-family: Verdana; font-size: 18pt; color: #000080; font-weight: bold; text-align: Center; margin-right: 3 }
h2 { font-family: Verdana; font-size: 14pt; color: #000080; font-weight: bold; background-color: #CCCCCC; margin-top: 24; margin-bottom: 3; padding: 6 }
h3 { font-family: Verdana; font-size: 10pt; font-weight: bold; background-color: #CCCCCC; margin-top: 24; margin-bottom: 3; padding: 6 }
pre { font-family: Courier New; font-size: 10pt; background-color: #CCFFCC; margin-left: 24; margin-right: 24 }
ul { list-style-type: square; margin-top: 6pt; margin-bottom: 0 }
ol { margin-top: 6pt; margin-bottom: 0 }
li { clear: both; margin-bottom: 6pt }
table { font-size: 100%; border-width: 0; padding: 0 }
th { color: #FFFFFF; background-color: #000080; text-align: left; vertical-align: bottom; padding-right: 6pt }
tr { text-align: left; vertical-align: top }
td { text-align: left; vertical-align: top; padding-right: 6pt }
.ToolT { font-size: 8pt; color: #808080 }
.TinyT { font-size: 8pt; text-align: Center }
code { color: #000000; background-color: #E0E0E0; font-family: 'Courier New', Courier; line-height: 120%; font-style: normal }
/*-----------------------------------------------------------Notes
-----------------------------------------------------------*/
p.note { font-weight: bold; clear: both; margin-bottom: 3pt; padding-top: 6pt }
/*-----------------------------------------------------------Expanding/Contracting Divisions
-----------------------------------------------------------*/
#expand { text-decoration: none; margin-bottom: 3pt }
img.expand { border-style: none; border-width: medium }
div.expand { display: none; margin-left: 9pt; margin-top: 0 }
/*-----------------------------------------------------------Where List Tags
-----------------------------------------------------------*/
p.wh { font-weight: bold; clear: both; margin-top: 6pt; margin-bottom: 3pt }
table.wh { width: 100% }
td.whItem { white-space: nowrap; font-style: italic; padding-right: 6pt; padding-bottom: 6pt }
td.whDesc { padding-bottom: 6pt }
/*-----------------------------------------------------------Keil Table Tags
-----------------------------------------------------------*/
table.kt { width: 100%; border: 1pt solid #000000 }
th.kt { white-space: nowrap; border-bottom: 1pt solid #000000; padding-left: 6pt; padding-right: 6pt; padding-top: 4pt; padding-bottom: 4pt }
tr.kt { }
td.kt { color: #000000; background-color: #E0E0E0; border-top: 1pt solid #A0A0A0; padding-left: 6pt; padding-right: 6pt; padding-top: 2pt; padding-bottom: 2pt }
/*----------------------------------------------------------------------------------------------------------------------*/
    .style1 {
	background-color: #E0E0E0;
}
.O
	{color:#1D315B;
	font-size:149%;}
    -->
</style>
</head>

<body>

<h1>Cortex Microcontroller Software Interface Standard<br>
    SPI Device</h1>

<p align="center">This file describes the SPI Device Driver for Cortex Microcontroller Software Interface Standard (CMSIS).</p>
<p align="center">Version: 1.10 - 24. February 2009</p>

<p class="TinyT">Information in this file, the accompany manuals, and software is<br>
                 Copyright © ARM Ltd.<br>All rights reserved.
</p>

<hr>

<h2>Revision History</h2>
<ul>
	<li>Revision 0.01 - February 2009: Concept</li>
	<li>Revision 1.10 - February 2009: First Release</li>
</ul>

<hr>

<h2>Contents</h2>

<ol>
  <li class="LI2"><a href="#About">About</a></li>
  <li class="LI2"><a href="#Files">CMSIS Spi Device Files</a></li>
  <li class="LI2"><a href="#Definitions">CMSIS Spi Device Definitions</a></li>  
  <li class="LI2"><a href="#IoBlock">CMSIS Spi Device I/O Block</a></li>
  <li class="LI2"><a href="#Functions">CMSIS Spi Device Functions</a></li>
  <li class="LI2"><a href="#Flowcharts">Flowcharts</a></li>
</ol>



<p>&nbsp;</p>
<h2><a name="About"></a>About</h2>
<p>
  The CMSIS Spi Device provides a standard interface to a Serial peripheral interface (SPI)
  that is part of a Cortex-M3 system.
  This interface is an hardware abstraction layer for the SPI.
  It consists of a general Spi Device Driver (files SpiDev.h) and a device specific Spi Device Driver
  (files SpiDev_STM32.[h,c]). The device specific Spi Device Driver provides an I/O Block to pass 
  parameter and to access the Device Driver. Each Spi Device needs a device specific Spi Device
  Driver which provides it's own I/O block.
</p>
<p>
  To ease use and design of the Spi Device Driver only one SPI can be used,  Data Frame Format is
  limited to 8 bit and only master mode is possible. This will cover most of the use cases for 
  a SPI.
</p>

<p>&nbsp;</p>
<h2><a name="Files"></a>CMSIS Spi Device Files</h2>
<p>
  <p>
  The sample driver is implemented for a ST Microlectronics STM32F103 device and uses the following files:
</p>
<table class="kt" border="0" cellpadding="0" cellspacing="0">
  <tbody>
    <tr>
      <th class="kt">Name</th>
      <th class="kt">Description</th>
    </tr>
    <tr>
      <td class="kt"><b><a href="#SpiDev_h">SpiDev.h</a></b></td>
      <td class="kt">Global defines and structure definitions for general Spi Device interface.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#SpiDev_STM32_h">SpiDev_STM32.h</a></b></td>
      <td class="kt">Device dependent definitions of the device specific Spi Device Driver.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#SpiDev_STM32_c">SpiDev_STM32.c</a></b></td>
      <td class="kt">Device specific Spi Device Driver.</td>
    </tr>

  </tbody>
</table>

<h3><a name="SpiDev_h"></a>File SpiDev.h</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Description</b></td>
      <td>File <strong>SpiDev.h</strong> contains function prototypes and type definitions for configuration 
          values. Also global defines are part of this file. 
          File <strong>SpiDev.h</strong> must be included in the application. 
          This file contains the type definition for I/O Block. The I/O block contains configuration values 
          and function pointer to access the device specific Spi Device Driver .
      </td>
    </tr>
  </tbody>
</table>

<h3><a name="SpiDev_STM32_h"></a>File SpiDev_STM32.h</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Description</b></td>
      <td>File <strong>SpiDev_STM32.h</strong> contains STM32F103 device specific defines like registers and register values.
          It is only included from file <strong>SpiDev_STM32.c</strong>.
      </td>
    </tr>
  </tbody>
</table>

<h3><a name="SpiDev_STM32_c"></a>File SpiDev_STM32.c</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Description</b></td>
      <td>File <strong>SpiDev_STM32.c</strong> contains static functions of this 
         specific Spi Device Driver and provides the Device Driver specific I/O block.
         It must be linked to the application.
         The compiler switches <b>_SPI_</b>, <b>_SPI_REMAP_</b>are used to select 
         the SPI and the SPI pins.
      </td>
    </tr>
    <tr>
      <td><b>Compiler switches</b></td>
      <td>
        <p><b>_SPI_</b><br>
           Valid values are:
          <ul>
            <li>1..3</li>
          </ul>
        </p>
        <p><b>_SPI_REMAP_</b><br>
           Valid values are:
          <ul>
            <li>0   SPI  pins are not remapped (default)</li>
            <li>1   SPI1 pins are remapped</li>
          </ul>
        </p>
      </td>
    </tr>
  </tbody>
</table>



<p>&nbsp;</p>
<h2><a name="Definitions"></a>CMSIS SPI Device Definitions</h2>
<p>
  Spi Device Driver uses following definitions for configuartion and 
  function parameter values:
</p>
<table class="kt" border="0" cellpadding="0" cellspacing="0">
  <tbody>
    <tr>
      <th class="kt">Name</th>
      <th class="kt">Description</th>
    </tr>
    <tr>
      <td class="kt"><b><a href="#GlobalDefines">Global Defines</a></b></td>
      <td class="kt">Global defined values.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#SpiConfiguration">Spi Configuration</a></b></td>
      <td class="kt">Spi Configuration parameters.</td>
    </tr>

  </tbody>
</table>

<h3><a name="GlobalDefines"></a>Global Defines</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
#define SpiDev_CLOCK_POLARITY_IDLELOW      0
#define SpiDev_CLOCK_POLARITY_IDLEHIGH     1

#define SpiDev_CLOCK_PHASE_FIRSTEDGE       0
#define SpiDev_CLOCK_PHASE_SECONDEDGE      1

#define SpiDev_SSO_DISABLED                0
#define SpiDev_SSO_ENABLED                 1</pre>
      </td>
    </tr>
    <tr>
      <td><b>Description</b></td>
      <td>
        <p>These defines are used from the Spi Device Driver.
        </p>
      </td>
    </tr>
    <tr>
      <td><b>Define</b></td>
      <td>
        <p><b>SpiDev_CLOCK_POLARITY_IDLELOW</b><br>
           CK to 0 when idle.
        </p>
        <p><b>SpiDev_CLOCK_POLARITY_IDLEHIGH</b><br>
           CK to 1 when idle.
        </p>
        <p><b>SpiDev_CLOCK_PHASE_FIRSTEDGE</b><br>
           The first clock transition is the first data capture edge.
        </p>
        <p><b>SpiDev_CLOCK_PHASE_SECONDEDGE</b><br>
           The second clock transition is the first data capture edge.
        </p>
        <p><b>SpiDev_SSO_DISABLED</b><br>
           SS output is disabled in master mode and the cell can work in multimaster configuration.
        </p>
        <p><b>SpiDev_SSO_ENABLED</b><br>
           SS output is enabled in master mode and when the cell is enabled. 
           The cell cannot work in a multimaster environment.
        </p>
      </td>
    </tr>
  </tbody>
</table>

<h3><a name="SpiConfiguration"></a>Spi Configuration</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
typedef struct {                                                          
   uint32_t Baudrate:25;
   uint32_t Polarity:1;
   uint32_t Phase:1;
   uint32_t SlaveSelect:1;
   uint32_t Reserved:4;               
} SpiDev_CFG;</pre>
      </td>
    </tr>
    <tr>
      <td><b>Description</b></td>
      <td>
        <p>Spi Configuration attributes and explanation.
        </p>
      </td>
    </tr>
    <tr>
      <td><b>Attributes</b></td>
      <td>
        <p><b>BaudRate</b><br>
           Baudrate to use (e.g. 500000 (default), ..., 18000000)
        </p>
        <p><b>Polarity</b><br>
           Configures the used Clock Polarity.<br>
           Valid values are:
          <ul>
            <li>SpiDev_CLOCK_POLARITY_IDLELOW (default)</li>
            <li>SpiDev_CLOCK_POLARITY_IDLEHIGH</li>
          </ul>
        </p>
        <p><b>Phase</b><br>
        Configures the used Clock Phase.<br>
           Valid values are:
          <ul>
            <li>SpiDev_CLOCK_PHASE_FIRSTEDGE (default)</li>
            <li>SpiDev_CLOCK_PHASE_SECONDEDGE</li>
          </ul>
        </p>
        <p><b>SlaveSelect</b><br>
           Specifies the baviour of the SS output.<br>
           Valid values are:
          <ul>
            <li>SpiDev_SSO_DISABLED (default)</li>
            <li>SpiDev_SSO_ENABLED</li>
          </ul>
        </p>
        <p><b>Reserved</b><br>
           Reserved for future use.
        </p>
      </td>
    </tr>
  </tbody>
</table>




<p>&nbsp;</p>
<h2><a name="IoBlock"></a>CMSIS Spi Device I/O Block</h2>
<p>
  Spi Device Driver defines the following structure to pass initialization data
  and to access device specific functions:
</p>
<table class="kt" border="0" cellpadding="0" cellspacing="0">
  <tbody>
    <tr>
      <th class="kt">Name</th>
      <th class="kt">Description</th>
    </tr>
    <tr>
      <td class="kt"><b><a href="#SpiDev_IOB">SpiDev_IOB</a></b></td>
      <td class="kt">Structure for configuration values and functions pointers to the Spi Device Driver.</td>
    </tr>

  </tbody>
</table>

<h3><a name="SpiDev_IOB"></a>Structure SpiDev_IOB</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
typedef struct {
   SpiDev_CFG   Cfg;
   int (*Init)       (void);
   int (*UnInit)     (void);
   int (*BufTxRx)    (void *pDataTx, void *pDataRx, unsigned int Size);
   int (*SetBaudrate)(unsigned int Baudrate);
} SpiDev_IOB;</pre>
      </td>
    </tr>
    <tr>
      <td><b>Description</b></td>
      <td>
        <p>This structure is used to hold configuration values and function pointers to access
           the device specific Spi Device Driver. The configuration values are preset with
           default values.
        </p>
      </td>
    </tr>
    <tr>
      <td><b>Attributes</b></td>
      <td>
        <p><b>Cfg</b><br>
           A SpiDev_CFG structure holding the configuration parameter.
        </p>
        <p><b>int (*Init) (void);</b><br>
           Function pointer to Init function.
        </p>
        <p><b>int (*UnInit) (void);</b><br>
           Function pointer to UnInit function.
        </p>
        <p><b>int (*BufTxRx)    (void *pDataTx, void *pDataRx, unsigned int Size);</b><br>
           Function pointer to data transmit / receive function.
        </p>
        <p><b>int (*SetBaudrate)(unsigned int Baudrate);</b><br>
           Function pointer to change the used Baudrate.
        </p>
      </td>
    </tr>
  </tbody>
</table>




<p>&nbsp;</p>
<h2><a name="Functions"></a>CMSIS Spi Device Functions</h2>
<p>Spi Device Driver contains the following static functions:
</p>

<table class="kt" border="0" cellpadding="0" cellspacing="0">
  <tbody>
    <tr>
      <th class="kt">Name</th>
      <th class="kt">Description</th>
    </tr>

    <tr>
      <td class="kt"><b><a href="#SpiDev_Init">SpiDev_Init</a></b></td>
      <td class="kt">Initialize and start the Spi Device Driver.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#SpiDev_UnInit">SpiDev_UnInit</a></b></td>
      <td class="kt">Uninitialize and stop the Spi Device Driver.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#SpiDev_BufTxRx">SpiDev_BufTxRx</a></b></td>
      <td class="kt">Pass data to the Spi Device Driver to transmit and return received data.</td>
    </tr>
    <tr>
      <td class="kt"><b><a href="#SpiDev_SetBaudrate">SpiDev_SetBaudrate</a></b></td>
      <td class="kt">Change used Baudrate.</td>
    </tr>
  </tbody>
</table>

<h3><a name="SpiDev_Init"></a>Function SpiDev_Init</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
static int  SpiDev_Init   (void);</pre>
      </td>
    </tr>

    <tr>
      <td><b>Description</b></td>
      <td>This function initializes the Spi Device Driver according the <b>SpiDev_IOB</b> structure
          and starts it.
      </td>
    </tr>

    <tr>
      <td><b>Parameter</b></td>
      <td>none</td>
    </tr>

    <tr>
      <td><b>Return Code</b></td>
      <td><ul style="margin-top:0px">
            <li>Success (0)</li>
            <li>Failed (-1)</li>
          </ul>
      </td>
    </tr>
  </tbody>
</table>

<h3><a name="SpiDev_UnInit"></a>Function SpiDev_UnInit</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
static int  SpiDev_UnInit (void);</pre>
      </td>
    </tr>

    <tr>
      <td><b>Description</b></td>
      <td>This function uninitializes the Spi Device Driver and stops it.
      </td>
    </tr>

    <tr>
      <td><b>Parameter</b></td>
      <td>none</td>
    </tr>

    <tr>
      <td><b>Return Code</b></td>
      <td><ul style="margin-top:0px">
            <li>Success (0)</li>
            <li>Failed (-1)</li>
          </ul>
      </td>
    </tr>
  </tbody>
</table>

<h3><a name="SpiDev_BufTxRx"></a>Function SpiDev_BufTxRx</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
static int SpiDev_BufTxRx (void *pDataTx, void *pDataRx, unsigned int Size);</pre>
      </td>
    </tr>

    <tr>
      <td><b>Description</b></td>
      <td>This function passes data to the specific Spi Device Driver to transmit.
          It returns also the received data. This function is blocking.
      </td>
    </tr>

    <tr>
      <td><b>Parameter</b></td>
      <td>
        <p><b>pDataTx</b><br>
           Pointer to the data to send.
        </p>
        <p><b>pDataRx</b><br>
           Pointer to store the received data.
        </p>
        <p><b>Size</b><br>
           Number of bytes to transmit / receive.
        </p>
     </td>
    </tr>

    <tr>
      <td><b>Return Code</b></td>
      <td><ul style="margin-top:0px">
            <li>Success (0)</li>
            <li>Failed (-1)</li>
          </ul>
      </td>
    </tr>
  </tbody>
</table>

<h3><a name="SpiDev_SetBaudrate"></a>Function SpiDev_SetBaudrate</h3>
<table border="0" cellpadding="10" cellspacing="10">
  <tbody>
    <tr>
      <td><b>Summary</b></td>
      <td>
        <pre style="margin-left:0px">
static int SpiDev_SetBaudrate(unsigned int Baudrate);</pre>
      </td>
    </tr>

    <tr>
      <td><b>Description</b></td>
      <td>This function changes the currently used Baudrate. If it is not possible to use the
          specified Baudrate then the next lower possible Baudrate is used.
      </td>
    </tr>

    <tr>
      <td><b>Parameter</b></td>
      <td>
        <p><b>Baudrate</b><br>
           Baudrate to use.
        </p>
     </td>
    </tr>

    <tr>
      <td><b>Return Code</b></td>
      <td><ul style="margin-top:0px">
            <li>Success (0)</li>
            <li>Failed (-1)</li>
          </ul>
      </td>
    </tr>
  </tbody>
</table>



<p>&nbsp;</p>
<h2><a name="Flowcharts"></a>Flowcharts</h2>
<p>The following Flowchart shows a typical Spi Device flow. 
<p>
  <img class="part" alt="CMSIS_SpiDev_Polling" src="CMSIS_SpiDev_Polling.png" border="0">
</p>


</body>
</html>