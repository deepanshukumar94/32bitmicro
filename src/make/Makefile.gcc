#
# * 32bitmicro GCC Makefile gcc
# * $URL$
# * $ID$
#
#Copyright (c) 2009, 32bitmicro
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
#and/or other materials provided with the distribution.
#Neither the name of the 32bitmicro nor the names of its contributors may be used to endorse or promote products derived from this software without 
#specific prior written permission.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
#BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
#SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
#NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

ifndef TARGET_SDK_ROOT
${error TARGET_SDK_ROOT is not defined!}
endif

ifndef TARGET_SDK_PREFIX
${error TARGET_SDK_PREFIX is not defined!}
endif

ifndef TARGET_LIBC
${error TARGET_LIBC is not defined!}
endif

# Compiler
TARGET_COMPILER=GCC

# Otput extension
ifndef TARGET_SDK_OUT
TARGET_SDK_OUT=elf
endif

# sdk paths
TARGET_SDK_CC_INCLUDE_PATH=${TARGET_SDK_ROOT}/lib/gcc/${GCC_PREFIX}/${GCC_VERSION}/include
TARGET_SDK_CC_LINK_PATH=${TARGET_SDK_ROOT}/lib/gcc/${GCC_PREFIX}/${GCC_VERSION}
TARGET_SDK_LIBC_INCLUDE_PATH=${TARGET_SDK_ROOT}/${GCC_PREFIX}/include
TARGET_SDK_LIBC_LINK_PATH=${TARGET_SDK_ROOT}/${GCC_PREFIX}/lib
TARGET_SDK_STARTUP_PATH=../lib/gcc/${GCC_PREFIX}/${GCC_VERSION}
#TARGET_SDK_STARTUP_PATH=${TARGET_SDK_ROOT}/lib/gcc/${GCC_PREFIX}/${GCC_VERSION}

# Tools
# 
AR=${TARGET_SDK_PREFIX}ar${EXE}
AS=${TARGET_SDK_PREFIX}as${EXE}
ACPP=${TARGET_SDK_PREFIX}cpp${EXE} -x assembler-with-cpp
ASPP=${TARGET_SDK_PREFIX}gcc${EXE} -c -x assembler-with-cpp
CPP=${TARGET_SDK_PREFIX}cpp${EXE}
GCC=${TARGET_SDK_PREFIX}${GCC_CMD_PREFIX}gcc${GCC_CMD_POSTFIX}${EXE}
GXX=${TARGET_SDK_PREFIX}${GCC_CMD_PREFIX}g++${GCC_CMD_POSTFIX}${EXE}
LD=${TARGET_SDK_PREFIX}ld${EXE}
NM=${TARGET_SDK_PREFIX}nm${EXE}
OBJCOPY=${TARGET_SDK_PREFIX}objcopy${EXE}
OBJDUMP=${TARGET_SDK_PREFIX}objdump${EXE}
RANLIB=${TARGET_SDK_PREFIX}ranlib${EXE}
STRIP=${TARGET_SDK_PREFIX}strip${EXE}
READELF=${TARGET_SDK_PREFIX}readelf${EXE}
CC=${GCC}
CXX=${GXX}

# Binary outout
GEN_BIN_CMD=$(OBJCOPY) -O binary ${PROJECT}.${OUT}   ${PROJECT}.${OUT}.bin

# HEX output
GEN_HEX_CMD=$(OBJCOPY) -O ihex   ${PROJECT}.${OUT}   ${PROJECT}.${OUT}.hex

# Symbols
GEN_SYM_CMD=$(OBJDUMP)  -t       ${PROJECT}.${OUT}  > ${PROJECT}.${OUT}.sym

# Listing
GEN_LST_CMD=$(OBJDUMP)  -S -D    ${PROJECT}.${OUT}  > ${PROJECT}.${OUT}.lst


# Flags

ifeq ($(TARGET_CORE),CM0)
TARGET_SDK_AFLAGS  =-mcpu=cortex-m0
TARGET_SDK_CFLAGS  =-mcpu=cortex-m0
TARGET_SDK_LDFLAGS =
endif

ifeq ($(TARGET_CORE),CM3)
TARGET_SDK_AFLAGS  =-mcpu=cortex-m3
TARGET_SDK_CFLAGS  =-mcpu=cortex-m3
TARGET_SDK_LDFLAGS =
endif

#-m32 or -m64 code type?
# -mcmodel=medium | large code model
ifeq ($(TARGET_CORE),X86)
TARGET_SDK_AFLAGS  =-march=i386
TARGET_SDK_CFLAGS  =-march=i386
TARGET_SDK_LDFLAGS =
endif

ifndef TARGET_SDK_AFLAGS
${error TARGET_SDK_AFLAGS is not defined}
endif

ifndef TARGET_SDK_CFLAGS
${error TARGET_SDK_CFLAGS is not defined}
endif

#ifndef TARGET_SDK_LDFLAGS
#${error TARGET_SDK_LDFLAGS is not defined}
#endif

# 32bitmicro flash link 
ifndef TARGET_SDK_USE_DEFAULT_LDSCRIPT
TARGET_SDK_LDSCRIPT +=-L$(32BITMICRO)/src/make -T$(32BITMICRO)/src/make/${TARGET_MCU}-gcc-flash.ld
endif

# Target specific libries
TARGET_SDK_LIBS    =

# Target defines

ifdef TARGET
TARGET_SDK_CFLAGS  +=-D${TARGET}
endif

ifdef TARGET_SERIES
TARGET_SDK_CFLAGS  +=-D${TARGET_SERIES}
endif

ifdef TARGET_FAMILY
TARGET_SDK_CFLAGS  +=-D${TARGET_FAMILY}
else
${warning TARGET_FAMILY is not defined!}
endif

ifdef TARGET_CORE
TARGET_SDK_CFLAGS  +=-D${TARGET_CORE}
endif

ifdef TARGET_COREREV
TARGET_SDK_CFLAGS  +=-D${TARGET_COREREV}
endif

ifdef TARGET_ARCH
TARGET_SDK_CFLAGS  +=-D${TARGET_ARCH}
endif

ifeq ($(TARGET_ARCH),ARMv6M)
TARGET_SDK_AFLAGS  +=-march=armv6-m
TARGET_SDK_CFLAGS  +=-march=armv6-m
#TARGET_SDK_LDFLAGS +=
endif

ifeq ($(TARGET_ARCH),ARMv7M)
TARGET_SDK_AFLAGS  +=-march=armv7-m
TARGET_SDK_CFLAGS  +=-march=armv7-m
#TARGET_SDK_LDFLAGS +=
endif

ifeq ($(TARGET_CODE_MODE),ARM)
#TARGET_SDK_AFLAGS  +=
#TARGET_SDK_CFLAGS  +=
#TARGET_SDK_LDFLAGS +=
endif

ifeq ($(TARGET_CODE_MODE),THUMB)
TARGET_SDK_AFLAGS  +=-mthumb
TARGET_SDK_CFLAGS  +=-mthumb
#TARGET_SDK_LDFLAGS +=
endif

ifeq ($(TARGET_CODE_MODE),THUMB2)
TARGET_SDK_AFLAGS  +=-mthumb
TARGET_SDK_CFLAGS  +=-mthumb
#TARGET_SDK_LDFLAGS +=
endif

ifdef TARGET_GEN_MAP
TARGET_SDK_LDFLAGS+=--print-map -Map $(PROJECT_OUT).map
endif

ifdef TARGET_GEN_CREF
TARGET_SDK_LDFLAGS+=--cref
endif

# libc - default for gcc is newlib
ifeq ($(TARGET_LIBC),default)
#-include $(32BITMICRO)/src/make/Makefile.newlib
else
-include $(32BITMICRO)/src/make/Makefile.$(TARGET_LIBC)
endif

LIBGCC:=-L$(TARGET_SDK_CC_LINK_PATH)

# add libc flags to sdk flags
TARGET_SDK_AFLAGS  +=$(TARGET_LIBC_AFLAGS)
TARGET_SDK_CFLAGS  +=$(TARGET_LIBC_CFLAGS)
TARGET_SDK_CPPFLAGS+=$(TARGET_LIBC_CPPFLAGS)
TARGET_SDK_LDFLAGS +=$(TARGET_LIBC_LDFLAGS) $(LIBGCC) 
TARGET_SDK_LIBS    +=$(TARGET_LIBC_LIBS) -lgcc

# Suffixes
.SUFFIXES:
.SUFFIXES: .c .cpp .cc .cxx .h .hpp .o .a .s .S

%.o: %.c
	@echo Compiling $<
	$(CC) $(ALL_CFLAGS) -c $< -o $@ 
ifdef TARGET_GEN_SYM
	$(OBJDUMP)  -t $@  > $@.sym
endif
ifdef TARGET_GEN_LST
	$(OBJDUMP)  -S -D  $@  > $@.lst
endif

%.o: %.cpp
	@echo Compiling $<
	$(CXX) $(ALL_CPPFLAGS) -c $< -o $@ 
ifdef TARGET_GEN_SYM
	$(OBJDUMP)  -t $@  > $@.sym
endif
ifdef TARGET_GEN_LST
	$(OBJDUMP)  -S -D  $@  > $@.lst
endif

%.o: %.s
	@echo Assembling $< 
	$(AS) $(ALL_AFLAGS) $< -o $@
ifdef TARGET_GEN_SYM
	$(OBJDUMP)  -t $@  > $@.sym
endif
ifdef TARGET_GEN_LST
	$(OBJDUMP)  -S -D $@  > $@.lst
endif

%.o: %.S
	@echo Assembling $< 
	$(ASPP) $(ALL_AFLAGS) $< -o $@
#	$(ACPP) $(ALL_AFLAGS) | $(AS) -- $(ALL_AFLAGS) -o $
ifdef TARGET_GEN_SYM
	$(OBJDUMP)  -t $@  > $@.sym
endif
ifdef TARGET_GEN_LST
	$(OBJDUMP)  -S -D $@  > $@.lst
endif

